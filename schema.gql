# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TokenModel {
  token: String!
  name: String!
  type: String!
  owner: String!
  minted: String!
  burnt: String!
  decimals: Float!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  balance: String
  identifier: String
}

type PairInfoModel {
  reserves0: String!
  reserves1: String!
  totalSupply: String!
}

type LiquidityPosition {
  firstTokenAmount: String!
  secondTokenAmount: String!
}

type PairModel {
  address: String!
  firstToken: TokenModel!
  secondToken: TokenModel!
  firstTokenPrice: String!
  firstTokenPriceUSD: String!
  secondTokenPrice: String!
  secondTokenPriceUSD: String!
  liquidityPoolToken: TokenModel!
  liquidityPoolTokenPriceUSD: String!
  info: PairInfoModel!
  state: String!
}

type TemporaryFundsModel {
  pairAddress: String!
  firstToken: TokenModel
  firstAmount: String
  secondToken: TokenModel
  secondAmount: String
}

type FactoryModel {
  address: String!
  pairCount: Float!
  totalTxCount: Float!
  totalVolume: Float!
  totalLiquidity: Float!
}

type TransactionModel {
  nonce: Float!
  value: String!
  sender: String!
  receiver: String!
  gasPrice: Float!
  gasLimit: Float!
  data: String!
  chainID: String!
  version: Float!
  options: String
  status: String
  signature: String
}

type NFTTokenModel {
  token: String!
  name: String!
  type: String!
  owner: String!
  minted: String!
  burnt: String!
  decimals: Float!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  balance: String
  identifier: String
  canAddSpecialRoles: Boolean!
  canTransferNFTCreateRole: Boolean!
  NFTCreateStopped: Boolean!
  wiped: String!
  attributes: String
  creator: String
  nonce: Int
  royalties: String
}

type FarmTokenAttributesModel {
  identifier: String!
  attributes: String!
  rewardPerShare: String!
  enteringEpoch: Int!
  aprMultiplier: Int!
  lockedRewards: Boolean!
}

type FarmModel {
  address: String!
  farmedToken: TokenModel!
  farmToken: NFTTokenModel!
  farmTokenPriceUSD: String!
  farmingToken: TokenModel!
  perBlockRewards: String!
  farmTokenSupply: String!
  farmingTokenReserve: String!
  APR: String!
  state: String!
}

type CommunityDistributionModel {
  epoch: Float!
  amount: String!
}

type DistributionModel {
  address: String!
  communityDistribution: CommunityDistributionModel!
}

type WrapModel {
  address: String!
  wrappedToken: TokenModel!
}

type ProxyModel {
  address: String!
  wrappedLpToken: NFTTokenModel!
  wrappedFarmToken: NFTTokenModel!
  assetToken: TokenModel!
  lockedAssetToken: NFTTokenModel!
  intermediatedPairs: [String!]!
  intermediatedFarms: [String!]!
}

type WrappedLpTokenAttributesModel {
  identifier: String!
  attributes: String!
  lpTokenID: String!
  lpTokenTotalAmount: String!
  lockedAssetsInvested: String!
  lockedAssetsNonce: Int!
}

type WrappedFarmTokenAttributesModel {
  identifier: String!
  attributes: String!
  farmTokenID: String!
  farmTokenNonce: Int!
  farmTokenIdentifier: String!
  farmTokenAttributes: FarmTokenAttributesModel!
  farmedTokenID: String!
  farmedTokenNonce: Int!
}

type GenericEsdtAmountPair {
  tokenID: String!
  tokenNonce: String!
  amount: String!
  pairAddress: String
}

type UnlockMileStoneModel {
  epoch: Int!
  percent: Int!
}

type LockedAssetModel {
  address: String!
  lockedToken: NFTTokenModel!
  unlockMilestones: [UnlockMileStoneModel!]!
}

type UserTokenModel {
  token: String!
  name: String!
  type: String!
  owner: String!
  minted: String!
  burnt: String!
  decimals: Float!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  balance: String
  identifier: String
  value: String!
}

type UserNFTTokenModel {
  token: String!
  name: String!
  type: String!
  owner: String!
  minted: String!
  burnt: String!
  decimals: Float!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  balance: String
  identifier: String
  canAddSpecialRoles: Boolean!
  canTransferNFTCreateRole: Boolean!
  NFTCreateStopped: Boolean!
  wiped: String!
  attributes: String
  creator: String
  nonce: Int
  royalties: String
  value: String!
}

type UserModel {
  address: String!
  tokens: [UserTokenModel!]!
  nfts: [UserNFTTokenModel!]!
}

type PairTradingModel {
  pairAddress: String!
  volumesUSD: String!
  feesUSD: String!
}

type FactoryTradingModel {
  totalVolumesUSD: String!
  totalFeesUSD: String!
}

type TradingInfoModel {
  factory: FactoryTradingModel!
  pairs: [PairTradingModel!]!
}

type Query {
  factory: FactoryModel!
  pairAddresses: [String!]!
  pairs(offset: Int = 0, limit: Int = 10): [PairModel!]!
  createPair(secondTokenID: String!, firstTokenID: String!): TransactionModel!
  issueLPToken(lpTokenTicker: String!, lpTokenName: String!, address: String!): TransactionModel!
  setLocalRoles(address: String!): TransactionModel!
  setState(enable: Boolean!, address: String!): TransactionModel!
  setFee(enable: Boolean!, feeTokenID: String!, feeToAddress: String!, pairAddress: String!): TransactionModel!
  getAmountOut(amount: String!, tokenInID: String!, pairAddress: String!): String!
  getAmountIn(amount: String!, tokenOutID: String!, pairAddress: String!): String!
  getEquivalent(amount: String!, tokenInID: String!, pairAddress: String!): String!
  getTemporaryFunds(callerAddress: String!): [TemporaryFundsModel!]!
  getLiquidityPosition(liquidityAmount: String!, pairAddress: String!): LiquidityPosition!
  addLiquidity(pairAddress: String!, amount0: String!, amount1: String!, tolerance: Float!): TransactionModel!
  reclaimTemporaryFunds(pairAddress: String!): TransactionModel!
  removeLiquidity(pairAddress: String!, liquidity: String!, liquidityTokenID: String!, tolerance: Float!): TransactionModel!
  swapTokensFixedInput(pairAddress: String!, tokenInID: String!, amountIn: String!, tokenOutID: String!, amountOut: String!, tolerance: Float!): TransactionModel!
  swapTokensFixedOutput(pairAddress: String!, tokenInID: String!, amountIn: String!, tokenOutID: String!, amountOut: String!, tolerance: Float!): TransactionModel!
  tokensTransfer(pairAddress: String!, token: String!, amount: String!): TransactionModel!
  farmTokenAttributes(attributes: String!, identifier: String!): FarmTokenAttributesModel!
  farms: [FarmModel!]!
  getRewardsForPosition(farmAddress: String!, liquidity: String!, attributes: String!): String!
  enterFarm(farmAddress: String!, tokenInID: String!, amount: String!, lockRewards: Boolean): TransactionModel!
  exitFarm(farmAddress: String!, sender: String!, farmTokenID: String!, farmTokenNonce: Int!, amount: String!): TransactionModel!
  claimRewards(farmAddress: String!, sender: String!, farmTokenID: String!, farmTokenNonce: Int!, amount: String!): TransactionModel!
  distribution: DistributionModel!
  claimLockedAssets: TransactionModel!
  distributedLockedAssets(userAddress: String!): String!
  proxy: ProxyModel!
  tokensTransferProxy(pairAddress: String!, amount: String!, tokenID: String!, tokenNonce: Int, sender: String): TransactionModel!
  addLiquidityProxy(pairAddress: String!, amount0: String!, amount1: String!, tolerance: Float!, token0ID: String!, token1ID: String!, token0Nonce: Int, token1Nonce: Int): TransactionModel!
  getTemporaryFundsProxy(userAddress: String!): [GenericEsdtAmountPair!]!
  reclaimTemporaryFundsProxy(firstTokenID: String!, secondTokenID: String!, firstTokenNonce: Int, secondTokenNonce: Int): TransactionModel!
  removeLiquidityProxy(sender: String!, pairAddress: String!, wrappedLpTokenID: String!, wrappedLpTokenNonce: Int!, liquidity: String!, tolerance: Float!): TransactionModel!
  enterFarmProxy(sender: String!, farmAddress: String!, acceptedLockedTokenID: String!, acceptedLockedTokenNonce: Int!, amount: String!, lockRewards: Boolean): TransactionModel!
  exitFarmProxy(sender: String!, farmAddress: String!, wrappedFarmTokenID: String!, wrappedFarmTokenNonce: Int!, amount: String!): TransactionModel!
  claimFarmRewardsProxy(sender: String!, farmAddress: String!, wrappedFarmTokenID: String!, wrappedFarmTokenNonce: Int!, amount: String!): TransactionModel!
  wrappedLpTokenAttributes(args: DecodeAttributesArgs!): [WrappedLpTokenAttributesModel!]!
  wrappedFarmTokenAttributes(args: DecodeAttributesArgs!): [WrappedFarmTokenAttributesModel!]!
  lockedAssetFactory: LockedAssetModel!
  unlockAssets(sender: String!, lockedTokenID: String!, lockedTokenNonce: Int!, amount: String!): TransactionModel!
  wrappingInfo: WrapModel!
  wrapEgld(amount: String!): TransactionModel!
  unwrapEgld(amount: String!): TransactionModel!
  user(address: String!): UserModel!
  getTokenPriceUSD(tokenID: String!): String!
  totalLockedValueUSDFarms: String!
  totalTokenSupply(tokenID: String!): String!
  totalAgregatedRewards(days: Int!): String!
  tradingInfo: TradingInfoModel!
}

input DecodeAttributesArgs {
  batchAttributes: [DecodeAttributesModel!]!
}

input DecodeAttributesModel {
  identifier: String!
  attributes: String!
}
